// Generated by CoffeeScript 1.6.2
(function() {
  var Landing,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Landing = (function() {
    var detailView, detailsBtn, landingView, mainWrap, returnBtn;

    mainWrap = detailView = landingView = '';

    detailsBtn = '';

    returnBtn = '';

    Landing.prototype.scrollNum = 0;

    Landing.prototype.scrollThreshold = 20;

    Landing.prototype.detailOffset = '-800px';

    Landing.prototype.previewOffset = '-200px';

    Landing.prototype.isDetailOpen = false;

    function Landing() {
      this.setUpdatePositionInterval = __bind(this.setUpdatePositionInterval, this);
      this.closePreview = __bind(this.closePreview, this);
      this.openPreview = __bind(this.openPreview, this);
      this.decrementScroll = __bind(this.decrementScroll, this);
      this.closeDetail = __bind(this.closeDetail, this);
      this.openDetail = __bind(this.openDetail, this);
      this.negativeScroll = __bind(this.negativeScroll, this);
      this.positiveScroll = __bind(this.positiveScroll, this);
      this.handleScroll = __bind(this.handleScroll, this);      this.mainWrap = $('#main-wrap');
      this.detailView = $('.detail-view');
      this.landingView = $('.landing-view');
      this.detailsBtn = $('.details-btn');
      this.returnBtn = $('.return-btn');
      this.detailsBtn.bind('click', this.openDetail);
      this.returnBtn.bind('click', this.closeDetail);
      this.listenScroll();
      this.delay(2000, this.openPreview);
      this.delay(2700, this.closePreview);
    }

    Landing.prototype.listenScroll = function() {
      var _this = this;

      return this.mainWrap.bind('mousewheel', function(event, delta, deltaX, deltaY) {
        return _this.handleScroll(deltaY);
      });
    };

    Landing.prototype.handleScroll = function(deltaY) {
      if (deltaY > 0) {
        return this.positiveScroll(deltaY);
      } else {
        return this.negativeScroll(deltaY);
      }
    };

    Landing.prototype.positiveScroll = function(deltaY) {
      this.scrollNum += deltaY;
      if (this.scrollNum >= this.scrollThreshold && this.isDetailOpen) {
        this.closeDetail();
        return this.scrollNum = 0;
      }
    };

    Landing.prototype.negativeScroll = function(deltaY) {
      this.scrollNum += deltaY;
      if (this.scrollNum <= -this.scrollThreshold && !this.isDetailOpen) {
        this.openDetail();
        return this.scrollNum = 0;
      }
    };

    Landing.prototype.openDetail = function() {
      this.detailView.css('top', this.detailOffset);
      return this.isDetailOpen = true;
    };

    Landing.prototype.closeDetail = function() {
      this.detailView.css('top', '0');
      return this.isDetailOpen = false;
    };

    Landing.prototype.decrementScroll = function() {
      if (this.scrollNum < 0) {
        this.scrollNum += 5;
      } else if (this.scrollNum > 0) {
        this.scrollNum -= 5;
      }
      return console.log('scrollNum: ' + this.scrollNum);
    };

    Landing.prototype.openPreview = function() {
      this.detailView.css('top', this.previewOffset);
      return this.detailsBtn.css('bottom', parseInt(this.previewOffset) * -1 + 'px');
    };

    Landing.prototype.closePreview = function() {
      this.detailView.css('top', '0');
      return this.detailsBtn.css('bottom', '0');
    };

    Landing.prototype.delay = function() {
      var args, fn, time;

      time = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return setTimeout.apply(null, [fn, time].concat(__slice.call(args)));
    };

    Landing.prototype.setUpdatePositionInterval = function(intervalMs) {
      return setInterval(this.decrementScroll, intervalMs);
    };

    return Landing;

  })();

  $(document).ready(function() {
    return window.landing = new Landing;
  });

}).call(this);
